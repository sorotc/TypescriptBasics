/**
 * TypeScript Basics Tutorial
 * ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */

console.log("üéì ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô TypeScript Basics ‡πÅ‡∏•‡∏∞ Variable Scope!");
console.log("=" .repeat(60));

async function runTutorial() {
    console.log("\nüìö ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:");
    console.log("1. TypeScript ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - Types, Arrays, Objects, Functions");
    console.log("2. Variable Scope: var - Function scope ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ");
    console.log("3. Variable Scope: let - Block scope ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡∏µ");
    console.log("4. Variable Scope: const - Immutability ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    console.log("5. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö var, let, const ‡πÅ‡∏•‡∏∞ Best Practices");
    console.log("6. Template Literals ‡πÅ‡∏•‡∏∞ String Templates");
    console.log("7. Variable Declaration ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
    console.log("8. Functions ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    
    console.log("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô...\n");
    
    try {
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: TypeScript Basics");
        console.log("-".repeat(40));
        await import('./01-typescript-basics');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2: Variable Scope - var");
        console.log("-".repeat(40));
        await import('./02-var-scope');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: Variable Scope - let");
        console.log("-".repeat(40));
        await import('./03-let-scope');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4: Variable Scope - const");
        console.log("-".repeat(40));
        await import('./04-const-scope');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö var, let, const");
        console.log("-".repeat(40));
        await import('./05-comparison');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Template Literals ‡πÅ‡∏•‡∏∞ String Templates");
        console.log("-".repeat(40));
        await import('./06-templates');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7: Variable Declaration ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
        console.log("-".repeat(40));
        await import('./07-variable-declaration');
        
        console.log("\n" + "=".repeat(60));
        console.log("üìñ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 8: Functions ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        console.log("-".repeat(40));
        await import('./08-functions');
        
        console.log("\n" + "=".repeat(60));
        console.log("üéâ ‡∏à‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô TypeScript Basics!");
        console.log("=" .repeat(60));
        
        console.log("\nüìù ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:");
        console.log("‚úÖ TypeScript ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: Types, Interfaces, Functions");
        console.log("‚úÖ var: Function scope, Hoisting, ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ");
        console.log("‚úÖ let: Block scope, ‡πÑ‡∏°‡πà‡∏°‡∏µ hoisting, ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á var");
        console.log("‚úÖ const: Block scope, Immutable reference, ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
        console.log("‚úÖ Template Literals: String interpolation, Multiline, Tagged templates");
        console.log("‚úÖ Variable Declaration: Destructuring, Type assertions, Scope patterns");
        console.log("‚úÖ Functions: Overloading, Generics, Async, Higher-order functions");
        console.log("‚úÖ Best Practices: ‡πÉ‡∏ä‡πâ const ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô, ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á var");
        
        console.log("\nüí° Tips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:");
        console.log("1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ const ‡πÄ‡∏™‡∏°‡∏≠, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign");
        console.log("2. ‡πÉ‡∏ä‡πâ TypeScript compiler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö errors");
        console.log("3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ESLint/TSLint ‡πÄ‡∏û‡∏∑‡πà‡∏≠ enforce best practices");
        console.log("4. ‡πÉ‡∏ä‡πâ strict mode ‡πÉ‡∏ô TypeScript");
        console.log("5. ‡πÉ‡∏ä‡πâ template literals ‡πÅ‡∏ó‡∏ô string concatenation");
        console.log("6. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô pure functions ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ");
        
        console.log("\nüîó ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:");
        console.log("- src/01-typescript-basics.ts - TypeScript ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô");
        console.log("- src/02-var-scope.ts - Variable scope: var");
        console.log("- src/03-let-scope.ts - Variable scope: let");
        console.log("- src/04-const-scope.ts - Variable scope: const");
        console.log("- src/05-comparison.ts - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞ best practices");
        console.log("- src/06-templates.ts - Template literals ‡πÅ‡∏•‡∏∞ string templates");
        console.log("- src/07-variable-declaration.ts - Variable declaration ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
        console.log("- src/08-functions.ts - Functions ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        console.log("- src/exercises/practice.ts - ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏î‡∏•‡∏≠‡∏á");
        
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:", error);
    }
}

// ‡∏£‡∏±‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
runTutorial().then(() => {
    console.log("\nüéì ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ TypeScript ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤!");
    console.log("Happy Coding! üöÄ");
}).catch(error => {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
});

export { };
