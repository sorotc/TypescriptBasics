/**
 * ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Template Literals ‡πÅ‡∏•‡∏∞ String Templates
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô template literals ‡πÉ‡∏ô TypeScript
 */

console.log("üéØ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6: Template Literals ‡πÅ‡∏•‡∏∞ String Templates");
console.log("=" .repeat(50));

// ==========================================
// 1. Basic Template Literals
// ==========================================
console.log("\n1Ô∏è‚É£ Basic Template Literals");
console.log("-".repeat(40));

// Traditional string concatenation
const firstName = "‡∏™‡∏°‡∏ä‡∏≤‡∏¢";
const lastName = "‡πÉ‡∏à‡∏î‡∏µ";
const age = 25;

const oldWay = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ " + firstName + " " + lastName + " ‡∏≠‡∏≤‡∏¢‡∏∏ " + age + " ‡∏õ‡∏µ";
console.log("üìù ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (concatenation):", oldWay);

// Template literals
const newWay = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${firstName} ${lastName} ‡∏≠‡∏≤‡∏¢‡∏∏ ${age} ‡∏õ‡∏µ`;
console.log("‚ú® ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (template literal):", newWay);

// ==========================================
// 2. Multiline Strings
// ==========================================
console.log("\n2Ô∏è‚É£ Multiline Strings");
console.log("-".repeat(40));

// ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
const oldMultiline = "‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1\n" +
                    "‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2\n" +
                    "‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 3";

// ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
const newMultiline = `‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1
‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2
‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 3`;

console.log("üìù Multiline ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤:");
console.log(oldMultiline);

console.log("\n‚ú® Multiline ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà:");
console.log(newMultiline);

// ==========================================
// 3. Expression Interpolation
// ==========================================
console.log("\n3Ô∏è‚É£ Expression Interpolation");
console.log("-".repeat(40));

const a = 10;
const b = 20;

// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô template literals
const calculation = `${a} + ${b} = ${a + b}`;
console.log("üßÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:", calculation);

// Function calls
const getCurrentTime = () => new Date().toLocaleTimeString("th-TH");
const timeMessage = `‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${getCurrentTime()}`;
console.log("‚è∞ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function:", timeMessage);

// Conditional expressions
const score = 85;
const grade = `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score} ‡πÄ‡∏Å‡∏£‡∏î: ${score >= 80 ? "A" : score >= 70 ? "B" : score >= 60 ? "C" : "F"}`;
console.log("üìä Conditional expression:", grade);

// Object properties
const user = { name: "‡∏≠‡∏≤‡∏£‡∏µ‡∏¢‡πå", role: "developer", experience: 3 };
const userInfo = `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.name} (${user.role}) ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå ${user.experience} ‡∏õ‡∏µ`;
console.log("üë§ Object properties:", userInfo);

// ==========================================
// 4. Advanced Template Literals
// ==========================================
console.log("\n4Ô∏è‚É£ Advanced Template Literals");
console.log("-".repeat(40));

// Nested template literals
const language = "TypeScript";
const level: "beginner" | "intermediate" | "advanced" = "intermediate";
const nestedTemplate = `
‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ${language}
‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${level.toUpperCase()}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${`${level === "beginner" ? "üå±" : level === "intermediate" ? "üåø" : "üå≥"} ${level}`}
`;

console.log("ü™Ü Nested templates:", nestedTemplate);

// Template literals ‡∏Å‡∏±‡∏ö arrays
const fruits = ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", "‡∏Å‡∏•‡πâ‡∏ß‡∏¢", "‡∏™‡πâ‡∏°", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á"];
const fruitList = `‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
${fruits.map((fruit, index) => `${index + 1}. ${fruit}`).join('\n')}
‡∏£‡∏ß‡∏° ${fruits.length} ‡∏ä‡∏ô‡∏¥‡∏î`;

console.log("üçé Array processing:", fruitList);

// ==========================================
// 5. Tagged Template Literals
// ==========================================
console.log("\n5Ô∏è‚É£ Tagged Template Literals");
console.log("-".repeat(40));

// Simple tagged template
function highlight(strings: TemplateStringsArray, ...values: any[]): string {
    return strings.reduce((result, string, i) => {
        const value = values[i] ? `**${values[i]}**` : '';
        return result + string + value;
    }, '');
}

const highlighted = highlight`‡∏ä‡∏∑‡πà‡∏≠: ${firstName} ‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ`;
console.log("‚ú® Tagged template (highlight):", highlighted);

// HTML template
function html(strings: TemplateStringsArray, ...values: any[]): string {
    return strings.reduce((result, string, i) => {
        const value = values[i] || '';
        return result + string + String(value).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }, '');
}

const userInput = "<script>alert('xss')</script>";
const safeHtml = html`<div>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userInput}</div>`;
console.log("üîí HTML escaping:", safeHtml);

// Currency formatting
function currency(strings: TemplateStringsArray, ...values: number[]): string {
    return strings.reduce((result, string, i) => {
        const value = values[i];
        const formatted = value !== undefined ? 
            new Intl.NumberFormat('th-TH', { 
                style: 'currency', 
                currency: 'THB' 
            }).format(value) : '';
        return result + string + formatted;
    }, '');
}

const price = 1250.50;
const discount = 125;
const invoice = currency`‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${price} ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î: ${discount} ‡∏£‡∏ß‡∏°: ${price - discount}`;
console.log("üí∞ Currency formatting:", invoice);

// ==========================================
// 6. SQL Template (Safe Query Building)
// ==========================================
console.log("\n6Ô∏è‚É£ SQL Template");
console.log("-".repeat(40));

function sql(strings: TemplateStringsArray, ...values: any[]): { query: string; params: any[] } {
    let query = '';
    const params: any[] = [];
    
    strings.forEach((string, i) => {
        query += string;
        if (values[i] !== undefined) {
            query += `$${params.length + 1}`;
            params.push(values[i]);
        }
    });
    
    return { query, params };
}

const userId = 123;
const userName = "‡∏™‡∏°‡∏ä‡∏≤‡∏¢";
const { query, params } = sql`
    SELECT * FROM users 
    WHERE id = ${userId} 
    AND name = ${userName}
`;

console.log("üóÉÔ∏è SQL Query:", query);
console.log("üóÉÔ∏è Parameters:", params);

// ==========================================
// 7. Internationalization (i18n)
// ==========================================
console.log("\n7Ô∏è‚É£ Internationalization");
console.log("-".repeat(40));

// Simple i18n function
const translations = {
    th: {
        greeting: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {name} ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö",
        itemCount: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        total: "‡∏£‡∏ß‡∏° {amount} ‡∏ö‡∏≤‡∏ó"
    },
    en: {
        greeting: "Hello {name}, welcome",
        itemCount: "You have {count} items",
        total: "Total {amount} baht"
    }
};

function t(lang: 'th' | 'en') {
    return function(strings: TemplateStringsArray, ...values: any[]): string {
        const key = strings[0].trim();
        const template = translations[lang][key as keyof typeof translations['th']];
        
        if (!template) return key;
        
        return template.replace(/{(\w+)}/g, (match, prop) => {
            const index = strings.indexOf(`{${prop}}`);
            return values[index] || match;
        });
    };
}

const tTh = t('th');
const tEn = t('en');

const customerName = "‡∏™‡∏°‡∏®‡∏£‡∏µ";
const itemCount = 5;
const totalAmount = 1500;

// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô i18n templates
console.log("üáπüá≠ Thai:", `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${customerName} ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${itemCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
console.log("üá∫üá∏ English:", `Hello ${customerName}, you have ${itemCount} items`);

// ==========================================
// 8. Debugging Templates
// ==========================================
console.log("\n8Ô∏è‚É£ Debugging Templates");
console.log("-".repeat(40));

function debug(strings: TemplateStringsArray, ...values: any[]): string {
    const timestamp = new Date().toISOString();
    const debugInfo = values.map((value, index) => {
        return `[${index}]: ${typeof value} = ${JSON.stringify(value)}`;
    }).join(', ');
    
    const message = strings.reduce((result, string, i) => {
        return result + string + (values[i] || '');
    }, '');
    
    return `[${timestamp}] ${message} | DEBUG: {${debugInfo}}`;
}

const debugMessage = debug`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${customerName} ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
console.log("üêõ Debug template:", debugMessage);

// ==========================================
// 9. Performance Considerations
// ==========================================
console.log("\n9Ô∏è‚É£ Performance Considerations");
console.log("-".repeat(40));

function performanceTest() {
    const iterations = 100000;
    const testName = "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö";
    const testValue = 42;
    
    // Test concatenation
    const concatStart = performance.now();
    for (let i = 0; i < iterations; i++) {
        const result = "‡∏ä‡∏∑‡πà‡∏≠: " + testName + " ‡∏Ñ‡πà‡∏≤: " + testValue;
    }
    const concatEnd = performance.now();
    
    // Test template literals
    const templateStart = performance.now();
    for (let i = 0; i < iterations; i++) {
        const result = `‡∏ä‡∏∑‡πà‡∏≠: ${testName} ‡∏Ñ‡πà‡∏≤: ${testValue}`;
    }
    const templateEnd = performance.now();
    
    console.log(`‚ö° Concatenation: ${(concatEnd - concatStart).toFixed(2)}ms`);
    console.log(`‚ö° Template literal: ${(templateEnd - templateStart).toFixed(2)}ms`);
    console.log("üìù Template literals ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö concatenation");
}

performanceTest();

// ==========================================
// 10. Best Practices
// ==========================================
console.log("\nüîü Best Practices");
console.log("-".repeat(40));

console.log("üìã Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Template Literals:");

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ template literals ‡πÅ‡∏ó‡∏ô concatenation
const goodExample1 = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${firstName}!`;
console.log("‚úÖ ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô concatenation:", goodExample1);

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö multiline strings
const goodExample2 = `
    SELECT name, email 
    FROM users 
    WHERE active = true
    ORDER BY name
`;
console.log("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö multiline strings");

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö complex expressions
const status = "active";
const goodExample3 = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status === "active" ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" : "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}`;
console.log("‚úÖ Complex expressions:", goodExample3);

// ‚ùå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á: ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö strings ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ interpolation
const badExample1 = `Hello World`; // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const betterExample1 = "Hello World";
console.log("‚ö†Ô∏è ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏±‡∏ö strings ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤");

// ‚ùå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á: nested templates ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
console.log("‚ö†Ô∏è ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á nested templates ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô");

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ tagged templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö special formatting
const formattedPrice = currency`‡∏£‡∏≤‡∏Ñ‡∏≤: ${1299.99}`;
console.log("‚úÖ Tagged templates:", formattedPrice);

// ==========================================
// 11. Common Use Cases
// ==========================================
console.log("\n1Ô∏è‚É£1Ô∏è‚É£ Common Use Cases");
console.log("-".repeat(40));

// API URLs
const apiBaseUrl = "https://api.example.com";
const userId2 = 456;
const apiUrl = `${apiBaseUrl}/users/${userId2}/profile`;
console.log("üåê API URL:", apiUrl);

// Log messages
const logLevel = "INFO";
const logMessage = "User logged in";
const timestamp = new Date().toISOString();
const logEntry = `[${timestamp}] [${logLevel}] ${logMessage}`;
console.log("üìã Log entry:", logEntry);

// Email templates
const recipientName = "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
const orderNumber = "ORD-2024-001";
const emailSubject = `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${orderNumber}`;
const emailBody = `
‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${recipientName}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${orderNumber}
‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ

‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠
‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
`;

console.log("üìß Email subject:", emailSubject);
console.log("üìß Email body:", emailBody);

// Configuration
const environment = "production";
const databaseUrl = `mongodb://${environment === "production" ? "prod-server" : "dev-server"}:27017/myapp`;
console.log("‚öôÔ∏è Database URL:", databaseUrl);

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// ==========================================
console.log("\nüìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6 - Template Literals:");
console.log("üéØ ‡πÉ‡∏ä‡πâ backticks (`) ‡πÅ‡∏ó‡∏ô quotes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö string interpolation");
console.log("üéØ ‡πÉ‡∏ä‡πâ ${expression} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö interpolation");
console.log("üéØ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö multiline strings ‡πÇ‡∏î‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥");
console.log("üéØ Tagged templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö advanced string processing");
console.log("üéØ ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ string concatenation ‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û");
console.log("üéØ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API URLs, log messages, emails, ‡πÅ‡∏•‡∏∞ HTML");
console.log("üéØ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");

export { };
