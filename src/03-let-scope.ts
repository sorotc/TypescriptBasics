/**
 * ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: Variable Scope - let
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ let ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ var
 */

console.log("üéØ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: Variable Scope - let");
console.log("=" .repeat(50));

// ==========================================
// 1. Block Scope ‡∏Ç‡∏≠‡∏á let
// ==========================================
console.log("\n1Ô∏è‚É£ Block Scope ‡∏Ç‡∏≠‡∏á let");
console.log("-".repeat(40));

function letScopeExample() {
    let functionScoped = "‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô function scope";
    
    if (true) {
        let blockScoped = "‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô block scope";
        console.log("üîç ‡πÉ‡∏ô if block:", blockScoped);
        console.log("üîç ‡πÉ‡∏ô if block (function var):", functionScoped);
    }
    
    // ‚ùå blockScoped ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≠‡∏Å block
    console.log("üîç ‡∏ô‡∏≠‡∏Å if block (function var):", functionScoped);
    
    try {
        // console.log("‚ùå ‡∏ô‡∏≠‡∏Å if block:", blockScoped); // ReferenceError
        console.log("‚ùå blockScoped ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≠‡∏Å block");
    } catch (error: any) {
        console.log("Error:", error.message);
    }
}

letScopeExample();

// ==========================================
// 2. Temporal Dead Zone ‡∏Ç‡∏≠‡∏á let
// ==========================================
console.log("\n2Ô∏è‚É£ Temporal Dead Zone ‡∏Ç‡∏≠‡∏á let");
console.log("-".repeat(40));

function temporalDeadZoneExample() {
    console.log("üö´ let ‡∏°‡∏µ Temporal Dead Zone");
    
    try {
        // console.log("‡∏Å‡πà‡∏≠‡∏ô declare:", temporalVar); // ReferenceError
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡πà‡∏≠‡∏ô declare");
    } catch (error: any) {
        console.log("Error:", error.message);
    }
    
    let temporalVar = "‡∏â‡∏±‡∏ô‡∏ñ‡∏π‡∏Å declare ‡πÅ‡∏•‡πâ‡∏ß";
    console.log("‚úÖ ‡∏´‡∏•‡∏±‡∏á declare:", temporalVar);
}

temporalDeadZoneExample();

// ==========================================
// 3. ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Loop ‡∏î‡πâ‡∏ß‡∏¢ let
// ==========================================
console.log("\n3Ô∏è‚É£ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Loop ‡∏î‡πâ‡∏ß‡∏¢ let");
console.log("-".repeat(40));

console.log("‚úÖ let ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ loop:");
const letFunctions: (() => string)[] = [];

for (let i = 0; i < 3; i++) {
    letFunctions.push(function() {
        return `let i = ${i}`;
    });
}

// ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
letFunctions.forEach((fn, index) => {
    console.log(`  Function ${index}:`, fn()); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
});

console.log("\nüí° ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: let i ‡∏°‡∏µ block scope");
console.log("   ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á loop ‡∏°‡∏µ block scope ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô");
console.log("   ‡πÅ‡∏ï‡πà‡∏•‡∏∞ function ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ i ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô");

// ==========================================
// 4. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Redeclare ‡πÑ‡∏î‡πâ
// ==========================================
console.log("\n4Ô∏è‚É£ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Redeclare ‡πÑ‡∏î‡πâ");
console.log("-".repeat(40));

let noDuplicateVar = "‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å";
console.log("üîí ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å:", noDuplicateVar);

// ‚ùå let noDuplicateVar = "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á"; // SyntaxError
console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ declare ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ");

// ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ reassign ‡πÑ‡∏î‡πâ
noDuplicateVar = "‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà";
console.log("‚úÖ reassign ‡πÑ‡∏î‡πâ:", noDuplicateVar);

// ==========================================
// 5. ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Global Properties
// ==========================================
console.log("\n5Ô∏è‚É£ ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Global Properties");
console.log("-".repeat(40));

let globalLet = "‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á global property";
console.log("üåç globalLet:", globalLet);
console.log("‚úÖ let ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á property ‡πÉ‡∏ô global object");

// ==========================================
// 6. Block Scope ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
// ==========================================
console.log("\n6Ô∏è‚É£ Block Scope ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ");
console.log("-".repeat(40));

// ‡πÉ‡∏ô for loop
console.log("üîÑ ‡πÉ‡∏ô for loop:");
for (let loopVar = 1; loopVar <= 2; loopVar++) {
    console.log(`  ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${loopVar}: loopVar = ${loopVar}`);
}
// console.log("‚ùå ‡∏ô‡∏≠‡∏Å loop:", loopVar); // Error

// ‡πÉ‡∏ô if statement
console.log("\nüîÄ ‡πÉ‡∏ô if statement:");
if (true) {
    let ifVar = "‡πÉ‡∏ô if block";
    console.log(`  ${ifVar}`);
}
// console.log("‚ùå ‡∏ô‡∏≠‡∏Å if:", ifVar); // Error

// ‡πÉ‡∏ô try-catch
console.log("\nüö® ‡πÉ‡∏ô try-catch:");
try {
    let tryVar = "‡πÉ‡∏ô try block";
    console.log(`  ${tryVar}`);
} catch (error) {
    let catchVar = "‡πÉ‡∏ô catch block";
    console.log(`  ${catchVar}`);
}
// console.log("‚ùå ‡∏ô‡∏≠‡∏Å try-catch:", tryVar); // Error

// ‡πÉ‡∏ô switch case
console.log("\nüîÄ ‡πÉ‡∏ô switch case:");
const switchValue = Math.random() > 0.5 ? 1 : 2;
switch (switchValue) {
    case 1: {
        let caseVar = "‡πÉ‡∏ô case 1 block";
        console.log(`  ${caseVar}`);
        break;
    }
    case 2: {
        let caseVar = "‡πÉ‡∏ô case 2 block"; // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ block ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        console.log(`  ${caseVar}`);
        break;
    }
}

// ==========================================
// 7. Event Listeners ‡∏î‡πâ‡∏ß‡∏¢ let
// ==========================================
console.log("\n7Ô∏è‚É£ Event Listeners ‡∏î‡πâ‡∏ß‡∏¢ let");
console.log("-".repeat(40));

console.log("‚úÖ Event Listeners ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:");
const buttonNames = ["Button 1", "Button 2", "Button 3"];
const eventHandlers: (() => string)[] = [];

for (let k = 0; k < buttonNames.length; k++) {
    eventHandlers.push(function() {
        return `‡∏Ñ‡∏•‡∏¥‡∏Å ${buttonNames[k]}`;
    });
}

eventHandlers.forEach((handler, index) => {
    console.log(`  Handler ${index}:`, handler());
});

// ==========================================
// 8. Nested Scopes
// ==========================================
console.log("\n8Ô∏è‚É£ Nested Scopes");
console.log("-".repeat(40));

function nestedScopeExample() {
    let outerVar = "outer scope";
    console.log("üîç Outer scope:", outerVar);
    
    if (true) {
        let middleVar = "middle scope";
        console.log("üîç Middle scope:", middleVar);
        console.log("üîç Middle scope (outer):", outerVar);
        
        if (true) {
            let innerVar = "inner scope";
            console.log("üîç Inner scope:", innerVar);
            console.log("üîç Inner scope (middle):", middleVar);
            console.log("üîç Inner scope (outer):", outerVar);
        }
        
        // console.log("‚ùå innerVar ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", innerVar); // Error
    }
    
    // console.log("‚ùå middleVar ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", middleVar); // Error
}

nestedScopeExample();

// ==========================================
// 9. Async/Await ‡πÅ‡∏•‡∏∞ let
// ==========================================
console.log("\n9Ô∏è‚É£ Async/Await ‡πÅ‡∏•‡∏∞ let");
console.log("-".repeat(40));

async function asyncLetExample() {
    console.log("üöÄ Async operations ‡∏î‡πâ‡∏ß‡∏¢ let:");
    
    const promises: Promise<string>[] = [];
    
    for (let i = 0; i < 3; i++) {
        promises.push(new Promise(resolve => {
            setTimeout(() => {
                resolve(`Async result ${i}`);
            }, 100 * (i + 1));
        }));
    }
    
    const results = await Promise.all(promises);
    results.forEach((result, index) => {
        console.log(`  ${index}: ${result}`);
    });
}

// ‡∏£‡∏±‡∏ô async function
asyncLetExample();

// ==========================================
// 10. Performance ‡πÅ‡∏•‡∏∞ Memory
// ==========================================
console.log("\nüîü Performance ‡πÅ‡∏•‡∏∞ Memory");
console.log("-".repeat(40));

function memoryExample() {
    console.log("üíæ Memory usage ‡∏Ç‡∏≠‡∏á let:");
    
    // let ‡πÉ‡∏ä‡πâ memory ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    for (let i = 0; i < 1000; i++) {
        // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ i ‡πÉ‡∏ô block scope ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å garbage collect
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å block
    }
    
    console.log("‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ let ‡∏ñ‡∏π‡∏Å garbage collect ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å scope");
    console.log("‚úÖ ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î memory ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û");
}

memoryExample();

// ==========================================
// 11. Best Practices ‡∏Å‡∏±‡∏ö let
// ==========================================
console.log("\n1Ô∏è‚É£1Ô∏è‚É£ Best Practices ‡∏Å‡∏±‡∏ö let");
console.log("-".repeat(40));

console.log("üìã Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö let:");
console.log("‚úÖ ‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£");
console.log("‚úÖ ‡πÉ‡∏ä‡πâ let ‡πÉ‡∏ô loop counters");
console.log("‚úÖ ‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ block scope");
console.log("‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® let ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
console.log("‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢");
console.log("‚ùå ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign (‡πÉ‡∏ä‡πâ const ‡πÅ‡∏ó‡∏ô)");

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Good Practices
function goodPracticesExample() {
    console.log("\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Good Practices:");
    
    // ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ let ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loop counter
    for (let index = 0; index < 3; index++) {
        console.log(`  Loop ${index}`);
    }
    
    // ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á reassign
    let currentStatus = "pending";
    console.log(`  Status: ${currentStatus}`);
    
    currentStatus = "completed";
    console.log(`  Updated Status: ${currentStatus}`);
    
    // ‡∏î‡∏µ: Block scope ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö temporary variables
    if (true) {
        let tempCalculation = 10 * 20;
        console.log(`  Calculation: ${tempCalculation}`);
    }
    // tempCalculation ‡πÑ‡∏°‡πà‡∏£‡∏±‡πà‡∏ß‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
}

goodPracticesExample();

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// ==========================================
console.log("\nüìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3 - let:");
console.log("üéØ let ‡∏°‡∏µ block scope (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà function scope ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô var)");
console.log("üéØ let ‡∏°‡∏µ Temporal Dead Zone (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô declare)");
console.log("üéØ let ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ redeclare ‡πÑ‡∏î‡πâ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bugs)");
console.log("üéØ let ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ loop ‡πÅ‡∏•‡∏∞ async operations");
console.log("üéØ let ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á global properties");
console.log("üéØ let ‡πÉ‡∏ä‡πâ memory ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û");
console.log("üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ let ‡πÅ‡∏ó‡∏ô var ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ");

export { };
