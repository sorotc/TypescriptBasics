/**
 * ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7: Variable Declaration ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Destructuring, Type Assertions, ‡πÅ‡∏•‡∏∞ Scope Patterns
 */

console.log("üéØ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7: Variable Declaration ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
console.log("=" .repeat(50));

// ==========================================
// 1. Object Destructuring
// ==========================================
console.log("\n1Ô∏è‚É£ Object Destructuring");
console.log("-".repeat(40));

// Basic object destructuring
const person = {
    name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
    age: 28,
    city: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø",
    job: "Developer"
};

// ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
const nameOld = person.name;
const ageOld = person.age;
console.log("üìù ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤:", nameOld, ageOld);

// ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - Destructuring
const { name, age } = person;
console.log("‚ú® Destructuring:", name, age);

// Destructuring ‡∏û‡∏£‡πâ‡∏≠‡∏° rename
const { name: personName, age: personAge } = person;
console.log("üîÑ Rename:", personName, personAge);

// Destructuring ‡∏û‡∏£‡πâ‡∏≠‡∏° default values
const { name: userName, age: userAge, country = "‡πÑ‡∏ó‡∏¢" } = { ...person, country: undefined };
console.log("üîß Default values:", userName, userAge, country);

// Nested object destructuring
const employee = {
    personal: {
        firstName: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á",
        lastName: "‡πÉ‡∏à‡∏î‡∏µ"
    },
    work: {
        position: "Senior Developer",
        department: "IT",
        salary: 50000
    }
};

const { 
    personal: { firstName, lastName },
    work: { position, salary }
} = employee;

console.log("üèóÔ∏è Nested destructuring:", firstName, lastName, position, salary);

// ==========================================
// 2. Array Destructuring
// ==========================================
console.log("\n2Ô∏è‚É£ Array Destructuring");
console.log("-".repeat(40));

// Basic array destructuring
const fruits = ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", "‡∏Å‡∏•‡πâ‡∏ß‡∏¢", "‡∏™‡πâ‡∏°", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á"];

// ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
const firstFruitOld = fruits[0];
const secondFruitOld = fruits[1];
console.log("üìù ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤:", firstFruitOld, secondFruitOld);

// ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - Destructuring
const [firstFruit, secondFruit] = fruits;
console.log("‚ú® Array destructuring:", firstFruit, secondFruit);

// Skip elements
const [first, , third] = fruits;
console.log("‚è≠Ô∏è Skip elements:", first, third);

// Rest operator
const [head, ...rest] = fruits;
console.log("üì¶ Rest operator:", head, rest);

// Default values
const [a, b, c, d, e = "‡πÑ‡∏°‡πà‡∏°‡∏µ"] = fruits;
console.log("üîß Default values:", a, b, c, d, e);

// Swapping variables
let x = 10;
let y = 20;
console.log("üîÑ ‡∏Å‡πà‡∏≠‡∏ô swap:", { x, y });

[x, y] = [y, x];
console.log("üîÑ ‡∏´‡∏•‡∏±‡∏á swap:", { x, y });

// ==========================================
// 3. Function Parameter Destructuring
// ==========================================
console.log("\n3Ô∏è‚É£ Function Parameter Destructuring");
console.log("-".repeat(40));

// Object parameter destructuring
interface UserProfile {
    name: string;
    email: string;
    age?: number;
    isActive?: boolean;
}

function displayUser({ name, email, age = 0, isActive = true }: UserProfile): string {
    return `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${name} (${email}) ‡∏≠‡∏≤‡∏¢‡∏∏ ${age} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isActive ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏õ‡∏¥‡∏î"}`;
}

const user1 = {
    name: "‡∏≠‡∏≤‡∏£‡∏µ‡∏¢‡πå",
    email: "aree@example.com",
    age: 25,
    isActive: true
};

console.log("üë§ User profile:", displayUser(user1));

// Array parameter destructuring
function calculateSum([a, b, c = 0]: [number, number, number?]): number {
    return a + b + c;
}

console.log("‚ûï Sum:", calculateSum([10, 20]));
console.log("‚ûï Sum with default:", calculateSum([10, 20, 30]));

// Mixed destructuring
interface Config {
    database: {
        host: string;
        port: number;
    };
    features: string[];
}

function setupApp({ 
    database: { host, port },
    features: [mainFeature, ...otherFeatures]
}: Config): void {
    console.log(`üîß Database: ${host}:${port}`);
    console.log(`üéØ Main feature: ${mainFeature}`);
    console.log(`üéØ Other features: ${otherFeatures.join(", ")}`);
}

const appConfig: Config = {
    database: {
        host: "localhost",
        port: 5432
    },
    features: ["authentication", "logging", "caching", "monitoring"]
};

setupApp(appConfig);

// ==========================================
// 4. Type Assertions
// ==========================================
console.log("\n4Ô∏è‚É£ Type Assertions");
console.log("-".repeat(40));

// Basic type assertion
let someValue: unknown = "Hello TypeScript";

// Angle bracket syntax (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô JSX)
let strLength1: number = (<string>someValue).length;

// As syntax (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
let strLength2: number = (someValue as string).length;

console.log("üìè String length:", strLength1, strLength2);

// DOM type assertions
// const inputElement = document.getElementById("myInput") as HTMLInputElement;
// inputElement.value = "New value";

// Type assertion ‡∏Å‡∏±‡∏ö arrays
interface Product {
    id: number;
    name: string;
    price: number;
}

const apiResponse: unknown = [
    { id: 1, name: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ A", price: 100 },
    { id: 2, name: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ B", price: 200 }
];

const products = apiResponse as Product[];
console.log("üõçÔ∏è Products:", products);

// Non-null assertion
let maybeString: string | null = "Hello";
let definitelyString: string = maybeString!; // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null
console.log("‚úÖ Non-null assertion:", definitelyString);

// ==========================================
// 5. Variable Scope Patterns
// ==========================================
console.log("\n5Ô∏è‚É£ Variable Scope Patterns");
console.log("-".repeat(40));

// Module Pattern
function createCounter() {
    let count = 0;
    
    return {
        increment: () => ++count,
        decrement: () => --count,
        getCount: () => count
    };
}

const counter1 = createCounter();
const counter2 = createCounter();

console.log("üî¢ Counter 1:", counter1.increment()); // 1
console.log("üî¢ Counter 1:", counter1.increment()); // 2
console.log("üî¢ Counter 2:", counter2.increment()); // 1 (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å counter1)

// IIFE Pattern (Immediately Invoked Function Expression)
const result = (() => {
    const privateVar = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å";
    const calculate = (a: number, b: number): number => a * b;
    
    return {
        publicMethod: () => calculate(5, 10),
        publicVar: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ"
    };
})();

console.log("üîí IIFE result:", result.publicMethod());
console.log("üîí IIFE public:", result.publicVar);

// Namespace Pattern
namespace Calculator {
    const PI = 3.14159;
    
    export function calculateCircleArea(radius: number): number {
        return PI * radius * radius;
    }
    
    export function calculateRectangleArea(width: number, height: number): number {
        return width * height;
    }
}

console.log("üìê Circle area:", Calculator.calculateCircleArea(5));
console.log("üìê Rectangle area:", Calculator.calculateRectangleArea(4, 6));

// ==========================================
// 6. Temporal Dead Zone Patterns
// ==========================================
console.log("\n6Ô∏è‚É£ Temporal Dead Zone Patterns");
console.log("-".repeat(40));

function temporalDeadZoneExample() {
    console.log("üö´ Temporal Dead Zone Demo:");
    
    // ‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô declare
    try {
        // console.log(letVariable); // ReferenceError
        console.log("  let ‡∏Å‡πà‡∏≠‡∏ô declare: ‚ùå (Temporal Dead Zone)");
    } catch (error: any) {
        console.log("  Error:", error.name);
    }
    
    let letVariable = "let value";
    console.log("  let ‡∏´‡∏•‡∏±‡∏á declare:", letVariable);
    
    // Function hoisting vs let/const
    console.log("  Function call ‡∏Å‡πà‡∏≠‡∏ô declare:", hoistedFunction()); // ‚úÖ ‡πÑ‡∏î‡πâ
    
    function hoistedFunction(): string {
        return "Function hoisted!";
    }
    
    // ‚ùå Function expression ‡πÑ‡∏°‡πà hoist
    try {
        // console.log(notHoisted()); // ReferenceError
        console.log("  Function expression ‡∏Å‡πà‡∏≠‡∏ô declare: ‚ùå");
    } catch (error: any) {
        console.log("  Error:", error.name);
    }
    
    const notHoisted = () => "Not hoisted!";
    console.log("  Function expression ‡∏´‡∏•‡∏±‡∏á declare:", notHoisted());
}

temporalDeadZoneExample();

// ==========================================
// 7. Advanced Destructuring Patterns
// ==========================================
console.log("\n7Ô∏è‚É£ Advanced Destructuring Patterns");
console.log("-".repeat(40));

// Destructuring with computed property names
const key = "dynamicKey";
const obj = { dynamicKey: "dynamic value", staticKey: "static value" };

const { [key]: dynamicValue, staticKey } = obj;
console.log("üîë Computed property:", dynamicValue, staticKey);

// Destructuring in loops
const users = [
    { id: 1, name: "User 1", email: "user1@example.com" },
    { id: 2, name: "User 2", email: "user2@example.com" },
    { id: 3, name: "User 3", email: "user3@example.com" }
];

console.log("üîÑ Destructuring in loops:");
for (const { id, name } of users) {
    console.log(`  ID: ${id}, Name: ${name}`);
}

// Destructuring with type guards
function processData(data: { type: "user"; name: string } | { type: "product"; title: string }): void {
    if (data.type === "user") {
        const { name } = data;
        console.log("üë§ Processing user:", name);
    } else {
        const { title } = data;
        console.log("üõçÔ∏è Processing product:", title);
    }
}

processData({ type: "user", name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢" });
processData({ type: "product", title: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ A" });

// ==========================================
// 8. Error Handling in Destructuring
// ==========================================
console.log("\n8Ô∏è‚É£ Error Handling in Destructuring");
console.log("-".repeat(40));

function safeDestructuring() {
    console.log("üõ°Ô∏è Safe Destructuring:");
    
    // Null/undefined safety
    const nullableObj: { name?: string; age?: number } | null = null;
    
    // ‚ùå ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
    try {
        // const { name } = nullableObj; // TypeError
        console.log("  Destructuring null: ‚ùå (TypeError)");
    } catch (error: any) {
        console.log("  Error:", error.name);
    }
    
    // ‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const { name = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", age = 0 } = nullableObj || {};
    console.log(`  Safe destructuring: name=${name}, age=${age}`);
    
    // Optional chaining ‡∏Å‡∏±‡∏ö destructuring
    const deepObj: { user?: { profile?: { name?: string } } } = {};
    const userName = deepObj.user?.profile?.name ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    console.log("  Optional chaining:", userName);
}

safeDestructuring();

// ==========================================
// 9. Performance Considerations
// ==========================================
console.log("\n9Ô∏è‚É£ Performance Considerations");
console.log("-".repeat(40));

function performanceTest() {
    const iterations = 1000000;
    const testObj = { a: 1, b: 2, c: 3, d: 4, e: 5 };
    
    // Traditional property access
    const traditionalStart = performance.now();
    for (let i = 0; i < iterations; i++) {
        const a = testObj.a;
        const b = testObj.b;
        const c = testObj.c;
    }
    const traditionalEnd = performance.now();
    
    // Destructuring
    const destructuringStart = performance.now();
    for (let i = 0; i < iterations; i++) {
        const { a, b, c } = testObj;
    }
    const destructuringEnd = performance.now();
    
    console.log(`‚ö° Traditional access: ${(traditionalEnd - traditionalStart).toFixed(2)}ms`);
    console.log(`‚ö° Destructuring: ${(destructuringEnd - destructuringStart).toFixed(2)}ms`);
    console.log("üìù Destructuring ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏ï‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤");
}

performanceTest();

// ==========================================
// 10. Best Practices
// ==========================================
console.log("\nüîü Best Practices");
console.log("-".repeat(40));

console.log("üìã Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Variable Declaration:");

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ destructuring ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
function goodExample1() {
    const config = { host: "localhost", port: 3000, debug: true };
    const { host, port } = config; // ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ config.host, config.port
    console.log("‚úÖ Destructuring multiple values:", host, port);
}

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ default values
function goodExample2() {
    const settings: { theme: string; language?: string } = { theme: "dark" };
    const { theme, language = "th" } = settings;
    console.log("‚úÖ Default values:", theme, language);
}

// ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ type assertions ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
function goodExample3() {
    const apiData: unknown = { message: "success" };
    
    // Type guard ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ type assertion
    if (typeof apiData === "object" && apiData !== null && "message" in apiData) {
        console.log("‚úÖ Type guard:", (apiData as any).message);
    }
}

// ‚ùå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á: Destructuring ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
function badExample1() {
    const complexObj = {
        level1: {
            level2: {
                level3: {
                    level4: {
                        value: "too deep"
                    }
                }
            }
        }
    };
    
    // ‡πÑ‡∏°‡πà‡∏î‡∏µ: ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    // const { level1: { level2: { level3: { level4: { value } } } } } = complexObj;
    
    // ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤: ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    const { level1 } = complexObj;
    const { level2 } = level1;
    const { level3 } = level2;
    const { value } = level3.level4;
    
    console.log("‚ö†Ô∏è ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á destructuring ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô:", value);
}

goodExample1();
goodExample2();
goodExample3();
badExample1();

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// ==========================================
console.log("\nüìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7 - Variable Declaration:");
console.log("üéØ Object destructuring: { name, age } = person");
console.log("üéØ Array destructuring: [first, second] = array");
console.log("üéØ Default values: { name = 'default' } = obj");
console.log("üéØ Rest operator: [head, ...rest] = array");
console.log("üéØ Type assertions: value as Type ‡∏´‡∏£‡∏∑‡∏≠ <Type>value");
console.log("üéØ Temporal Dead Zone: let/const ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô declare");
console.log("üéØ Scope patterns: Module, IIFE, Namespace");
console.log("üéØ ‡πÉ‡∏ä‡πâ destructuring ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");

export { };
