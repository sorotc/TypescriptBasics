/**
 * ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö var, let, const ‡πÅ‡∏•‡∏∞ Best Practices
 * ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ
 */

console.log("üéØ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö var, let, const");
console.log("=" .repeat(50));

// ==========================================
// 1. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
// ==========================================
console.log("\n1Ô∏è‚É£ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö");
console.log("-".repeat(40));

console.log("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö var, let, const:");
console.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
console.log("‚îÇ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥            ‚îÇ   var   ‚îÇ   let   ‚îÇ  const  ‚îÇ");
console.log("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
console.log("‚îÇ Scope               ‚îÇFunction ‚îÇ Block   ‚îÇ Block   ‚îÇ");
console.log("‚îÇ Hoisting            ‚îÇ   ‚úÖ    ‚îÇ   ‚ùå    ‚îÇ   ‚ùå    ‚îÇ");
console.log("‚îÇ Temporal Dead Zone  ‚îÇ   ‚ùå    ‚îÇ   ‚úÖ    ‚îÇ   ‚úÖ    ‚îÇ");
console.log("‚îÇ Redeclaration       ‚îÇ   ‚úÖ    ‚îÇ   ‚ùå    ‚îÇ   ‚ùå    ‚îÇ");
console.log("‚îÇ Reassignment        ‚îÇ   ‚úÖ    ‚îÇ   ‚úÖ    ‚îÇ   ‚ùå    ‚îÇ");
console.log("‚îÇ Initialization      ‚îÇOptional ‚îÇOptional ‚îÇRequired ‚îÇ");
console.log("‚îÇ Global Property     ‚îÇ   ‚úÖ    ‚îÇ   ‚ùå    ‚îÇ   ‚ùå    ‚îÇ");
console.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");

// ==========================================
// 2. Scope Comparison
// ==========================================
console.log("\n2Ô∏è‚É£ Scope Comparison");
console.log("-".repeat(40));

function scopeComparison() {
    console.log("üîç Scope Comparison:");
    
    // Function scope (var)
    if (true) {
        var varScoped = "var: function scope";
        let letScoped = "let: block scope";
        const constScoped = "const: block scope";
        
        console.log("  ‡πÉ‡∏ô block:");
        console.log(`    var: ${varScoped}`);
        console.log(`    let: ${letScoped}`);
        console.log(`    const: ${constScoped}`);
    }
    
    // ‡∏ô‡∏≠‡∏Å block
    console.log("  ‡∏ô‡∏≠‡∏Å block:");
    console.log(`    var: ${varScoped} ‚úÖ (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)`);
    
    try {
        // console.log(`    let: ${letScoped}`); // ReferenceError
        console.log("    let: ‚ùå (‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)");
    } catch (error: any) {
        console.log("    let: ‚ùå (ReferenceError)");
    }
    
    try {
        // console.log(`    const: ${constScoped}`); // ReferenceError
        console.log("    const: ‚ùå (‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)");
    } catch (error: any) {
        console.log("    const: ‚ùå (ReferenceError)");
    }
}

scopeComparison();

// ==========================================
// 3. Hoisting Comparison
// ==========================================
console.log("\n3Ô∏è‚É£ Hoisting Comparison");
console.log("-".repeat(40));

function hoistingComparison() {
    console.log("üöÄ Hoisting Comparison:");
    
    // var hoisting
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    console.log("  var ‡∏Å‡πà‡∏≠‡∏ô declare:", typeof varHoisted); // undefined
    var varHoisted = "var value";
    console.log("  var ‡∏´‡∏•‡∏±‡∏á declare:", varHoisted);
    
    // let/const hoisting (Temporal Dead Zone)
    try {
        // console.log("  let ‡∏Å‡πà‡∏≠‡∏ô declare:", letHoisted); // ReferenceError
        console.log("  let ‡∏Å‡πà‡∏≠‡∏ô declare: ‚ùå (Temporal Dead Zone)");
    } catch (error: any) {
        console.log("  let ‡∏Å‡πà‡∏≠‡∏ô declare: ‚ùå (ReferenceError)");
    }
    
    let letHoisted = "let value";
    console.log("  let ‡∏´‡∏•‡∏±‡∏á declare:", letHoisted);
    
    const constHoisted = "const value";
    console.log("  const ‡∏´‡∏•‡∏±‡∏á declare:", constHoisted);
}

hoistingComparison();

// ==========================================
// 4. Loop Behavior Comparison
// ==========================================
console.log("\n4Ô∏è‚É£ Loop Behavior Comparison");
console.log("-".repeat(40));

function loopComparison() {
    console.log("üîÑ Loop Behavior Comparison:");
    
    // var problem
    console.log("  var ‡πÉ‡∏ô loop (‡∏õ‡∏±‡∏ç‡∏´‡∏≤):");
    const varFunctions: (() => string)[] = [];
    
    for (var i = 0; i < 3; i++) {
        varFunctions.push(function() {
            return `var i = ${i}`;
        });
    }
    
    varFunctions.forEach((fn, index) => {
        console.log(`    Function ${index}: ${fn()}`); // ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô 3
    });
    
    // let solution
    console.log("  let ‡πÉ‡∏ô loop (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤):");
    const letFunctions: (() => string)[] = [];
    
    for (let j = 0; j < 3; j++) {
        letFunctions.push(function() {
            return `let j = ${j}`;
        });
    }
    
    letFunctions.forEach((fn, index) => {
        console.log(`    Function ${index}: ${fn()}`); // ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    });
    
    // const in for...of
    console.log("  const ‡πÉ‡∏ô for...of:");
    const items = ["A", "B", "C"];
    for (const item of items) {
        console.log(`    const item: ${item}`);
    }
}

loopComparison();

// ==========================================
// 5. Redeclaration ‡πÅ‡∏•‡∏∞ Reassignment
// ==========================================
console.log("\n5Ô∏è‚É£ Redeclaration ‡πÅ‡∏•‡∏∞ Reassignment");
console.log("-".repeat(40));

function declarationComparison() {
    console.log("üîÑ Declaration ‡πÅ‡∏•‡∏∞ Assignment Comparison:");
    
    // var: redeclaration ‡πÑ‡∏î‡πâ, reassignment ‡πÑ‡∏î‡πâ
    var varVariable = "var ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô";
    console.log("  var ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:", varVariable);
    
    var varVariable = "var redeclare"; // ‚úÖ ‡πÑ‡∏î‡πâ
    varVariable = "var reassign"; // ‚úÖ ‡πÑ‡∏î‡πâ
    console.log("  var ‡∏´‡∏•‡∏±‡∏á redeclare ‡πÅ‡∏•‡∏∞ reassign:", varVariable);
    
    // let: redeclaration ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, reassignment ‡πÑ‡∏î‡πâ
    let letVariable = "let ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô";
    console.log("  let ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:", letVariable);
    
    // let letVariable = "let redeclare"; // ‚ùå SyntaxError
    letVariable = "let reassign"; // ‚úÖ ‡πÑ‡∏î‡πâ
    console.log("  let ‡∏´‡∏•‡∏±‡∏á reassign:", letVariable);
    console.log("  let redeclaration: ‚ùå (SyntaxError)");
    
    // const: redeclaration ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, reassignment ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    const constVariable = "const ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô";
    console.log("  const ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:", constVariable);
    
    // const constVariable = "const redeclare"; // ‚ùå SyntaxError
    // constVariable = "const reassign"; // ‚ùå TypeError
    console.log("  const redeclaration: ‚ùå (SyntaxError)");
    console.log("  const reassignment: ‚ùå (TypeError)");
}

declarationComparison();

// ==========================================
// 6. Performance Comparison
// ==========================================
console.log("\n6Ô∏è‚É£ Performance Comparison");
console.log("-".repeat(40));

function performanceComparison() {
    console.log("‚ö° Performance Comparison:");
    
    const iterations = 1000000;
    
    // Measure var performance
    const varStart = performance.now();
    for (var i = 0; i < iterations; i++) {
        var varTemp = i * 2;
    }
    const varEnd = performance.now();
    
    // Measure let performance
    const letStart = performance.now();
    for (let j = 0; j < iterations; j++) {
        let letTemp = j * 2;
    }
    const letEnd = performance.now();
    
    // Measure const performance
    const constStart = performance.now();
    const MULTIPLIER = 2;
    for (let k = 0; k < iterations; k++) {
        const constTemp = k * MULTIPLIER;
    }
    const constEnd = performance.now();
    
    console.log(`  var time: ${(varEnd - varStart).toFixed(2)}ms`);
    console.log(`  let time: ${(letEnd - letStart).toFixed(2)}ms`);
    console.log(`  const time: ${(constEnd - constStart).toFixed(2)}ms`);
    console.log("  üìù const ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞ engine optimize ‡πÑ‡∏î‡πâ‡∏î‡∏µ");
}

performanceComparison();

// ==========================================
// 7. Memory Usage Comparison
// ==========================================
console.log("\n7Ô∏è‚É£ Memory Usage Comparison");
console.log("-".repeat(40));

function memoryComparison() {
    console.log("üíæ Memory Usage Comparison:");
    
    // var: Function scoped - ‡∏£‡∏≠ function ‡∏à‡∏ö‡∏ñ‡∏∂‡∏á‡∏à‡∏∞ cleanup
    function varMemoryTest() {
        for (var i = 0; i < 1000; i++) {
            var varData = new Array(1000).fill(i);
            // varData ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å cleanup ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ function ‡∏à‡∏∞‡∏à‡∏ö
        }
        // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ varData ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô memory
        console.log("  var: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô memory ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ function ‡∏à‡∏∞‡∏à‡∏ö");
    }
    
    // let/const: Block scoped - cleanup ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å block
    function letConstMemoryTest() {
        for (let i = 0; i < 1000; i++) {
            let letData = new Array(1000).fill(i);
            const constData = new Array(1000).fill(i);
            // letData ‡πÅ‡∏•‡∏∞ constData ‡∏ñ‡∏π‡∏Å cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö loop
        }
        console.log("  let/const: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ñ‡∏π‡∏Å cleanup ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å block");
    }
    
    varMemoryTest();
    letConstMemoryTest();
    
    console.log("  üìù let/const ‡πÉ‡∏ä‡πâ memory ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ var");
}

memoryComparison();

// ==========================================
// 8. Best Practices Decision Tree
// ==========================================
console.log("\n8Ô∏è‚É£ Best Practices Decision Tree");
console.log("-".repeat(40));

console.log("üå≥ Decision Tree ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ var/let/const:");
console.log("‚îú‚îÄ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign ‡πÑ‡∏´‡∏°?");
console.log("‚îÇ  ‚îú‚îÄ ‡πÑ‡∏°‡πà ‚Üí ‡πÉ‡∏ä‡πâ const ‚úÖ");
console.log("‚îÇ  ‚îî‚îÄ ‡πÉ‡∏ä‡πà ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ block scope ‡πÑ‡∏´‡∏°?");
console.log("‚îÇ      ‚îú‚îÄ ‡πÉ‡∏ä‡πà ‚Üí ‡πÉ‡∏ä‡πâ let ‚úÖ");
console.log("‚îÇ      ‚îî‚îÄ ‡πÑ‡∏°‡πà ‚Üí ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ let (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á var) ‚ö†Ô∏è");
console.log("‚îî‚îÄ ‡∏Å‡∏é‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: const > let > var");

function bestPracticesExamples() {
    console.log("\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Best Practices:");
    
    // ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ const ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const API_URL = "https://api.example.com";
    const config = { timeout: 5000, retries: 3 };
    const users = ["Alice", "Bob", "Charlie"];
    
    console.log("  ‚úÖ const ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ references");
    
    // ‚úÖ ‡∏î‡∏µ: ‡πÉ‡∏ä‡πâ let ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á reassign
    let currentUser = users[0];
    let attempts = 0;
    
    for (let i = 0; i < users.length; i++) {
        currentUser = users[i];
        attempts++;
    }
    
    console.log("  ‚úÖ let ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á reassign");
    console.log(`    Current user: ${currentUser}, Attempts: ${attempts}`);
    
    // ‚ùå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á: var
    console.log("  ‚ùå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á var ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà");
}

bestPracticesExamples();

// ==========================================
// 9. Migration Guide ‡∏à‡∏≤‡∏Å var ‡πÄ‡∏õ‡πá‡∏ô let/const
// ==========================================
console.log("\n9Ô∏è‚É£ Migration Guide");
console.log("-".repeat(40));

console.log("üîÑ Migration Guide ‡∏à‡∏≤‡∏Å var ‡πÄ‡∏õ‡πá‡∏ô let/const:");
console.log("1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà var ‡∏î‡πâ‡∏ß‡∏¢ let");
console.log("2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô let ‡πÄ‡∏õ‡πá‡∏ô const ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ reassignment");
console.log("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö scope ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ");
console.log("4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç hoisting issues");
console.log("5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö functionality ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");

function migrationExample() {
    console.log("\nüîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Migration:");
    
    console.log("  ‡∏Å‡πà‡∏≠‡∏ô (var):");
    console.log("    var name = 'John';");
    console.log("    var age = 25;");
    console.log("    for (var i = 0; i < 3; i++) { ... }");
    
    console.log("  ‡∏´‡∏•‡∏±‡∏á (let/const):");
    console.log("    const name = 'John';");
    console.log("    let age = 25;");
    console.log("    for (let i = 0; i < 3; i++) { ... }");
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
    const name = "John";
    let age = 25;
    const hobbies = ["reading", "coding"];
    
    console.log(`  ‚úÖ const name: ${name}`);
    console.log(`  ‚úÖ let age: ${age}`);
    console.log(`  ‚úÖ const hobbies: ${hobbies.join(", ")}`);
    
    age = 26; // ‚úÖ reassign ‡πÑ‡∏î‡πâ
    hobbies.push("gaming"); // ‚úÖ modify array ‡πÑ‡∏î‡πâ
    
    console.log(`  ‚úÖ updated age: ${age}`);
    console.log(`  ‚úÖ updated hobbies: ${hobbies.join(", ")}`);
}

migrationExample();

// ==========================================
// 10. Common Anti-patterns ‡πÅ‡∏•‡∏∞ Solutions
// ==========================================
console.log("\nüîü Common Anti-patterns");
console.log("-".repeat(40));

console.log("‚ö†Ô∏è Common Anti-patterns ‡πÅ‡∏•‡∏∞ Solutions:");

// Anti-pattern 1: ‡πÉ‡∏ä‡πâ var ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
console.log("\n‚ùå Anti-pattern 1: ‡πÉ‡∏ä‡πâ var ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà");
console.log("  // ‡πÑ‡∏°‡πà‡∏î‡∏µ");
console.log("  var username = 'admin';");
console.log("  ‚úÖ Solution: ‡πÉ‡∏ä‡πâ const ‡∏´‡∏£‡∏∑‡∏≠ let");
console.log("  const username = 'admin';");

// Anti-pattern 2: ‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign
console.log("\n‚ùå Anti-pattern 2: ‡πÉ‡∏ä‡πâ let ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ reassign");
console.log("  // ‡πÑ‡∏°‡πà‡∏î‡∏µ");
console.log("  let PI = 3.14159;");
console.log("  ‚úÖ Solution: ‡πÉ‡∏ä‡πâ const");
console.log("  const PI = 3.14159;");

// Anti-pattern 3: ‡∏Å‡∏•‡∏±‡∏ß‡πÉ‡∏ä‡πâ const ‡∏Å‡∏±‡∏ö objects
console.log("\n‚ùå Anti-pattern 3: ‡∏Å‡∏•‡∏±‡∏ß‡πÉ‡∏ä‡πâ const ‡∏Å‡∏±‡∏ö objects");
console.log("  // ‡πÑ‡∏°‡πà‡∏î‡∏µ");
console.log("  let user = { name: 'John' };");
console.log("  ‚úÖ Solution: ‡πÉ‡∏ä‡πâ const ‡πÑ‡∏î‡πâ");
console.log("  const user = { name: 'John' };");
console.log("  user.name = 'Jane'; // ‡πÑ‡∏î‡πâ");

// ==========================================
// 11. Linting Rules
// ==========================================
console.log("\n1Ô∏è‚É£1Ô∏è‚É£ Linting Rules");
console.log("-".repeat(40));

console.log("üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ESLint Rules:");
console.log('  "no-var": "error" // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ var');
console.log('  "prefer-const": "error" // ‡πÉ‡∏ä‡πâ const ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ');
console.log('  "no-undef": "error" // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà define');
console.log('  "block-scoped-var": "error" // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö block scope');

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// ==========================================
console.log("\nüìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5 - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞ Best Practices:");
console.log("üéØ const > let > var (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)");
console.log("üéØ const: ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô, block scope, ‡πÑ‡∏°‡πà reassign");
console.log("üéØ let: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á reassign, block scope, ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ var");
console.log("üéØ var: ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà, function scope, ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á");
console.log("üéØ Migration: var ‚Üí let ‚Üí const (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)");
console.log("üéØ ‡πÉ‡∏ä‡πâ linting tools ‡πÄ‡∏û‡∏∑‡πà‡∏≠ enforce best practices");
console.log("üéØ block scope ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ function scope ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö maintainability");

export { };
