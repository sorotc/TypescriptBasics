/**
 * ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: TypeScript Basics
 * ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô TypeScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
 */

console.log("üéØ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: TypeScript Basics");
console.log("=" .repeat(50));

// ==========================================
// 1. Basic Types ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
// ==========================================
console.log("\n1Ô∏è‚É£ Basic Types (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)");
console.log("-".repeat(40));

// String
const studentName: string = "‡∏™‡∏°‡∏ä‡∏≤‡∏¢";
const greeting: string = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${studentName}`;
console.log("üìù String:", greeting);

// Number
const age: number = 25;
const pi: number = 3.14159;
const hexValue: number = 0xff;
console.log("üî¢ Number:", { age, pi, hexValue });

// Boolean
const isStudent: boolean = true;
const hasGraduated: boolean = false;
console.log("‚úÖ Boolean:", { isStudent, hasGraduated });

// ==========================================
// 2. Arrays ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
// ==========================================
console.log("\n2Ô∏è‚É£ Arrays (‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå)");
console.log("-".repeat(40));

// Array ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà 1
const fruits: string[] = ["‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•", "‡∏Å‡∏•‡πâ‡∏ß‡∏¢", "‡∏™‡πâ‡∏°"];
console.log("üçé fruits:", fruits);

// Array ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà 2
const numbers: Array<number> = [1, 2, 3, 4, 5];
console.log("üìä numbers:", numbers);

// Mixed array with union types
const mixedData: (string | number)[] = ["John", 25, "Thailand", 2024];
console.log("üîÄ mixedData:", mixedData);

// ==========================================
// 3. Objects ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
// ==========================================
console.log("\n3Ô∏è‚É£ Objects (‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏)");
console.log("-".repeat(40));

// Object literal
const person: { name: string; age: number; isEmployed: boolean } = {
    name: "‡∏™‡∏°‡∏®‡∏£‡∏µ",
    age: 28,
    isEmployed: true
};
console.log("üë§ person:", person);

// Interface (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö objects ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
interface Student {
    id: number;
    name: string;
    major: string;
    gpa?: number; // Optional property
}

const student1: Student = {
    id: 1,
    name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ",
    major: "Computer Science",
    gpa: 3.75
};
console.log("üéì student1:", student1);

// ==========================================
// 4. Functions ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
// ==========================================
console.log("\n4Ô∏è‚É£ Functions (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)");
console.log("-".repeat(40));

// Function declaration
function addNumbers(a: number, b: number): number {
    return a + b;
}

// Arrow function
const multiplyNumbers = (a: number, b: number): number => a * b;

// Function with optional parameter
function greetPerson(name: string, title?: string): string {
    return title ? `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${title}${name}` : `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}`;
}

// Function with default parameter
function calculateTotal(price: number, tax: number = 0.07): number {
    return price + (price * tax);
}

console.log("‚ûï addNumbers(5, 3):", addNumbers(5, 3));
console.log("‚úñÔ∏è multiplyNumbers(4, 6):", multiplyNumbers(4, 6));
console.log("üëã greetPerson('‡∏™‡∏°‡∏ä‡∏≤‡∏¢'):", greetPerson("‡∏™‡∏°‡∏ä‡∏≤‡∏¢"));
console.log("üëã greetPerson('‡∏™‡∏°‡∏ä‡∏≤‡∏¢', '‡∏Ñ‡∏∏‡∏ì'):", greetPerson("‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏Ñ‡∏∏‡∏ì"));
console.log("üí∞ calculateTotal(100):", calculateTotal(100));
console.log("üí∞ calculateTotal(100, 0.1):", calculateTotal(100, 0.1));

// ==========================================
// 5. Type Annotations ‡πÅ‡∏•‡∏∞ Type Inference
// ==========================================
console.log("\n5Ô∏è‚É£ Type Annotations vs Type Inference");
console.log("-".repeat(40));

// Type Annotation (‡∏£‡∏∞‡∏ö‡∏∏ type ‡πÄ‡∏≠‡∏á)
const explicitNumber: number = 42;
const explicitString: string = "Hello TypeScript";

// Type Inference (TypeScript ‡∏´‡∏≤ type ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)
const inferredNumber = 42; // TypeScript ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number
const inferredString = "Hello TypeScript"; // TypeScript ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string

console.log("üìù Type annotations ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô");
console.log("ü§ñ Type inference ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô");

// ==========================================
// 6. Union Types ‡πÅ‡∏•‡∏∞ Literal Types
// ==========================================
console.log("\n6Ô∏è‚É£ Union Types ‡πÅ‡∏•‡∏∞ Literal Types");
console.log("-".repeat(40));

// Union types
let id: string | number;
id = "ABC123";
console.log("üÜî id as string:", id);
id = 12345;
console.log("üÜî id as number:", id);

// Literal types
type Status = "pending" | "approved" | "rejected";
let orderStatus: Status = "pending";
console.log("üìã orderStatus:", orderStatus);

// ==========================================
// 7. Any, Unknown, ‡πÅ‡∏•‡∏∞ Never
// ==========================================
console.log("\n7Ô∏è‚É£ Any, Unknown, ‡πÅ‡∏•‡∏∞ Never");
console.log("-".repeat(40));

// any - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
let anyValue: any = "‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ";
anyValue = 123;
anyValue = true;
console.log("‚ö†Ô∏è any type (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥):", anyValue);

// unknown - ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤ any
let unknownValue: unknown = "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ type";
if (typeof unknownValue === "string") {
    console.log("‚úÖ unknown type (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢):", unknownValue.toUpperCase());
}

// never - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ return
function throwError(message: string): never {
    throw new Error(message);
}

// ==========================================
// 8. Type Assertions
// ==========================================
console.log("\n8Ô∏è‚É£ Type Assertions");
console.log("-".repeat(40));

let someValue: unknown = "Hello TypeScript";

// Type assertion ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1
let strLength1: number = (someValue as string).length;

// Type assertion ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô JSX)
let strLength2: number = (<string>someValue).length;

console.log("üìè String length:", strLength1);

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// ==========================================
console.log("\nüìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1:");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (string, number, boolean)");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Arrays ‡πÅ‡∏•‡∏∞ Objects");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Functions");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Type Annotations ‡πÅ‡∏•‡∏∞ Type Inference");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Union Types ‡πÅ‡∏•‡∏∞ Literal Types");
console.log("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Any, Unknown, Never ‡πÅ‡∏•‡∏∞ Type Assertions");

export { };
