/**
 * ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î TypeScript ‡πÅ‡∏•‡∏∞ Variable Scope
 * ‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
 */

console.log("üîß ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î TypeScript ‡πÅ‡∏•‡∏∞ Variable Scope");
console.log("=" .repeat(50));

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 1: TypeScript Basic Types
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 1: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡πâ‡∏ß‡∏¢ TypeScript");
console.log("-".repeat(40));

// TODO: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// 1. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ studentName ‡∏ä‡∏ô‡∏¥‡∏î string ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// 2. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ studentAge ‡∏ä‡∏ô‡∏¥‡∏î number ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
// 3. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ isGraduated ‡∏ä‡∏ô‡∏¥‡∏î boolean ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
// 4. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® array subjects ‡∏ä‡∏ô‡∏¥‡∏î string[] ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô

// ‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
const studentName: string = "‡∏™‡∏°‡∏ä‡∏≤‡∏¢";
const studentAge: number = 20;
const isGraduated: boolean = false;
const subjects: string[] = ["‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"];

console.log(`‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentName}, ‡∏≠‡∏≤‡∏¢‡∏∏: ${studentAge}, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${isGraduated}`);
console.log("‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:", subjects.join(", "));

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 2: Object ‡πÅ‡∏•‡∏∞ Interface
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Interface ‡πÅ‡∏•‡∏∞ Object");
console.log("-".repeat(40));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á interface ‡πÅ‡∏•‡∏∞ object
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á interface Car ‡∏ó‡∏µ‡πà‡∏°‡∏µ properties: brand, model, year, isElectric
// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á object myCar ‡∏ó‡∏µ‡πà implement interface Car
// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á function describeCar ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö parameter ‡πÄ‡∏õ‡πá‡∏ô Car ‡πÅ‡∏•‡∏∞ return string

// ‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
interface Car {
    brand: string;
    model: string;
    year: number;
    isElectric: boolean;
}

const myCar: Car = {
    brand: "Toyota",
    model: "Prius",
    year: 2023,
    isElectric: true
};

function describeCar(car: Car): string {
    const electricText = car.isElectric ? "‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤" : "‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå";
    return `${car.brand} ${car.model} ‡∏õ‡∏µ ${car.year} (${electricText})`;
}

console.log("‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô:", describeCar(myCar));

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 3: var vs let vs const
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏•‡∏≠‡∏á var vs let vs const");
console.log("-".repeat(40));

// TODO: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ

// üî¥ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà 1: var ‡πÉ‡∏ô loop
console.log("üî¥ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ var ‡πÉ‡∏ô loop:");
const varFunctions: (() => number)[] = [];

for (var i = 0; i < 3; i++) {
    varFunctions.push(function() {
        return i; // ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: i ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    });
}

varFunctions.forEach((fn, index) => {
    console.log(`  Function ${index} returns:`, fn());
});

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ let:
console.log("\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ let:");
const letFunctions: (() => number)[] = [];

for (let j = 0; j < 3; j++) {
    letFunctions.push(function() {
        return j; // ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: j ‡∏°‡∏µ block scope
    });
}

letFunctions.forEach((fn, index) => {
    console.log(`  Function ${index} returns:`, fn());
});

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 4: Destructuring
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 4: Destructuring");
console.log("-".repeat(40));

// TODO: ‡πÉ‡∏ä‡πâ destructuring ‡πÅ‡∏ó‡∏ô dot notation

const userProfile = {
    personal: {
        name: "‡∏™‡∏°‡∏®‡∏£‡∏µ",
        age: 25
    },
    contact: {
        email: "somsri@example.com",
        phone: "086-123-4567"
    },
    preferences: {
        language: "th",
        theme: "dark"
    }
};

// ‚ùå ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤:
// const name = userProfile.personal.name;
// const email = userProfile.contact.email;
// const language = userProfile.preferences.language;

// ‚úÖ ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - Destructuring:
const { 
    personal: { name, age },
    contact: { email },
    preferences: { language }
} = userProfile;

console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", { name, age, email, language });

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 5: Template Literals
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 5: Template Literals");
console.log("-".repeat(40));

// TODO: ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å string concatenation ‡πÄ‡∏õ‡πá‡∏ô template literals

const productName = "Laptop";
const price = 25000;
const discountPercent = 10;
const discountAmount = price * (discountPercent / 100);
const finalPrice = price - discountAmount;

// ‚ùå ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤:
// const message = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: " + productName + "\n" +
//                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏°: " + price + " ‡∏ö‡∏≤‡∏ó\n" +
//                "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î: " + discountPercent + "% (-" + discountAmount + " ‡∏ö‡∏≤‡∏ó)\n" +
//                "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: " + finalPrice + " ‡∏ö‡∏≤‡∏ó";

// ‚úÖ ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - Template Literals:
const message = `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productName}
‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏°: ${price} ‡∏ö‡∏≤‡∏ó
‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î: ${discountPercent}% (-${discountAmount} ‡∏ö‡∏≤‡∏ó)
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${finalPrice} ‡∏ö‡∏≤‡∏ó`;

console.log("‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤:");
console.log(message);

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 6: Functions
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 6: Functions");
console.log("-".repeat(40));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á functions ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î

// 1. Function ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
function calculateBMI(weight: number, height: number): number {
    return weight / (height * height);
}

// 2. Function ‡πÅ‡∏õ‡∏•‡∏ú‡∏• BMI
function interpretBMI(bmi: number): string {
    if (bmi < 18.5) return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢";
    if (bmi < 25) return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥";
    if (bmi < 30) return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô";
    return "‡∏≠‡πâ‡∏ß‡∏ô";
}

// 3. Arrow function ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏ú‡∏•
const getBMIResult = (weight: number, height: number): string => {
    const bmi = calculateBMI(weight, height);
    const interpretation = interpretBMI(bmi);
    return `BMI: ${bmi.toFixed(1)} (${interpretation})`;
};

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö functions
const testWeight = 65;
const testHeight = 1.70;

console.log("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI:");
console.log(`‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${testWeight} ‡∏Å‡∏Å., ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: ${testHeight} ‡∏°.`);
console.log(`‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${getBMIResult(testWeight, testHeight)}`);

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 7: Generic Functions
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 7: Generic Functions");
console.log("-".repeat(40));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á generic functions

// 1. Generic function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÉ‡∏ô array
function getUniqueItems<T>(items: T[]): T[] {
    return [...new Set(items)];
}

// 2. Generic function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter ‡∏î‡πâ‡∏ß‡∏¢ predicate
function filterItems<T>(items: T[], predicate: (item: T) => boolean): T[] {
    return items.filter(predicate);
}

// 3. Generic function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö group by key
function groupBy<T, K extends keyof T>(items: T[], key: K): Record<string, T[]> {
    return items.reduce((groups, item) => {
        const groupKey = String(item[key]);
        if (!groups[groupKey]) {
            groups[groupKey] = [];
        }
        groups[groupKey].push(item);
        return groups;
    }, {} as Record<string, T[]>);
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö generic functions
const numbers = [1, 2, 2, 3, 3, 4, 5];
const uniqueNumbers = getUniqueItems(numbers);
console.log("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥:", uniqueNumbers);

const words = ["apple", "banana", "apricot", "blueberry"];
const wordsStartingWithA = filterItems(words, word => word.startsWith("a"));
console.log("‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'a':", wordsStartingWithA);

interface Person {
    name: string;
    age: number;
    city: string;
}

const people: Person[] = [
    { name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", age: 25, city: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" },
    { name: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", age: 30, city: "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" },
    { name: "‡∏≠‡∏≤‡∏£‡∏µ‡∏¢‡πå", age: 25, city: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" }
];

const groupedByAge = groupBy(people, "age");
console.log("‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏:", groupedByAge);

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 8: Async/Await
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 8: Async/Await");
console.log("-".repeat(40));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á async functions

// 1. Mock API function
function mockApiCall(data: string, delay: number = 1000): Promise<string> {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (data) {
                resolve(`API Response: ${data}`);
            } else {
                reject(new Error("No data provided"));
            }
        }, delay);
    });
}

// 2. Async function ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
async function fetchMultipleData(): Promise<void> {
    try {
        console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API...");
        
        const results = await Promise.all([
            mockApiCall("User data", 500),
            mockApiCall("Product data", 300),
            mockApiCall("Order data", 700)
        ]);
        
        results.forEach((result, index) => {
            console.log(`üì° ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ${index + 1}:`, result);
        });
        
    } catch (error) {
        console.error("‚ùå Error:", error);
    }
}

// 3. Async function ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
async function fetchSequentialData(): Promise<void> {
    try {
        console.log("üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö...");
        
        const user = await mockApiCall("User", 200);
        console.log("üë§", user);
        
        const profile = await mockApiCall("Profile", 200);
        console.log("üìã", profile);
        
        const settings = await mockApiCall("Settings", 200);
        console.log("‚öôÔ∏è", settings);
        
    } catch (error) {
        console.error("‚ùå Error:", error);
    }
}

// ‡∏£‡∏±‡∏ô async functions
fetchMultipleData();

setTimeout(() => {
    fetchSequentialData();
}, 2000);

// ==========================================
// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢
// ==========================================
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á Task Manager");
console.log("-".repeat(40));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á Task Manager class ‡∏û‡∏£‡πâ‡∏≠‡∏° features ‡∏ï‡πà‡∏≤‡∏á‡πÜ

interface Task {
    id: number;
    title: string;
    description: string;
    completed: boolean;
    priority: "low" | "medium" | "high";
    dueDate?: Date;
}

class TaskManager {
    private tasks: Task[] = [];
    private nextId: number = 1;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° task ‡πÉ‡∏´‡∏°‡πà
    addTask(title: string, description: string, priority: Task["priority"] = "medium", dueDate?: Date): Task {
        const task: Task = {
            id: this.nextId++,
            title,
            description,
            completed: false,
            priority,
            dueDate
        };
        this.tasks.push(task);
        return task;
    }

    // ‡∏ó‡∏≥ task ‡πÄ‡∏™‡∏£‡πá‡∏à
    completeTask(id: number): boolean {
        const task = this.tasks.find(t => t.id === id);
        if (task) {
            task.completed = true;
            return true;
        }
        return false;
    }

    // ‡∏•‡∏ö task
    deleteTask(id: number): boolean {
        const index = this.tasks.findIndex(t => t.id === id);
        if (index !== -1) {
            this.tasks.splice(index, 1);
            return true;
        }
        return false;
    }

    // ‡πÅ‡∏™‡∏î‡∏á tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    getAllTasks(): Task[] {
        return [...this.tasks];
    }

    // ‡∏Å‡∏£‡∏≠‡∏á tasks ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    getTasksByStatus(completed: boolean): Task[] {
        return this.tasks.filter(task => task.completed === completed);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á tasks ‡∏ï‡∏≤‡∏° priority
    getTasksByPriority(priority: Task["priority"]): Task[] {
        return this.tasks.filter(task => task.priority === priority);
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ tasks
    getStats(): { total: number; completed: number; pending: number } {
        const total = this.tasks.length;
        const completed = this.tasks.filter(t => t.completed).length;
        const pending = total - completed;
        return { total, completed, pending };
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TaskManager
const taskManager = new TaskManager();

// ‡πÄ‡∏û‡∏¥‡πà‡∏° tasks
taskManager.addTask("‡πÄ‡∏£‡∏µ‡∏¢‡∏ô TypeScript", "‡∏®‡∏∂‡∏Å‡∏©‡∏≤ TypeScript basics ‡πÅ‡∏•‡∏∞ variable scope", "high");
taskManager.addTask("‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î", "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à", "medium");
taskManager.addTask("Review code", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", "low");

// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
console.log("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ tasks:", taskManager.getStats());

// ‡∏ó‡∏≥ task ‡πÄ‡∏™‡∏£‡πá‡∏à
taskManager.completeTask(1);

// ‡πÅ‡∏™‡∏î‡∏á tasks ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
const pendingTasks = taskManager.getTasksByStatus(false);
console.log("üìã Tasks ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à:");
pendingTasks.forEach(task => {
    console.log(`  ${task.id}. ${task.title} (${task.priority})`);
});

// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
console.log("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:", taskManager.getStats());

// ==========================================
// ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
// ==========================================
setTimeout(() => {
    console.log("\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î:");
    console.log("‚úÖ TypeScript Basic Types - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡πâ‡∏ß‡∏¢ type annotations");
    console.log("‚úÖ Object ‡πÅ‡∏•‡∏∞ Interface - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô interfaces");
    console.log("‚úÖ var vs let vs const - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á var");
    console.log("‚úÖ Destructuring - ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å objects ‡πÅ‡∏•‡∏∞ arrays");
    console.log("‚úÖ Template Literals - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á strings ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    console.log("‚úÖ Functions - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô functions");
    console.log("‚úÖ Generic Functions - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á reusable functions");
    console.log("‚úÖ Async/Await - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ asynchronous operations");
    console.log("‚úÖ Class ‡πÅ‡∏•‡∏∞ Advanced Patterns - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ");
    
    console.log("\nüí° ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠:");
    console.log("1. ‡∏ù‡∏∂‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô TypeScript ‡πÅ‡∏ö‡∏ö strict mode");
    console.log("2. ‡πÉ‡∏ä‡πâ ESLint ‡πÅ‡∏•‡∏∞ Prettier ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ");
    console.log("3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ design patterns ‡πÅ‡∏•‡∏∞ SOLID principles");
    console.log("4. ‡∏ù‡∏∂‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit tests ‡∏î‡πâ‡∏ß‡∏¢ Jest ‡∏´‡∏£‡∏∑‡∏≠ Vitest");
    console.log("5. ‡∏®‡∏∂‡∏Å‡∏©‡∏≤ advanced TypeScript features ‡πÄ‡∏ä‡πà‡∏ô mapped types, conditional types");
}, 3000);

export { };

// TODO: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö comment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: var ‡πÉ‡∏ô loop
/*
console.log("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1 - var ‡πÉ‡∏ô loop:");
for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(`var: ${i}`), 10);
}
*/

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: let ‡πÉ‡∏ô loop
/*
console.log("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 - let ‡πÉ‡∏ô loop:");
for (let j = 0; j < 3; j++) {
    setTimeout(() => console.log(`let: ${j}`), 50);
}
*/

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: const ‡∏Å‡∏±‡∏ö object
/*
console.log("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3 - const ‡∏Å‡∏±‡∏ö object:");
const person = { name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", age: 25 };
person.age = 26; // ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô?
// person = { name: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á", age: 30 }; // ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô?
console.log(person);
*/

// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
console.log("-".repeat(30));

// TODO: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
// ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÉ‡∏ä‡πâ var ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô closure

/*
function createCounters() {
    const counters = [];
    
    for (var i = 0; i < 3; i++) {
        counters.push(function() {
            return i; // ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: i ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 3 ‡πÄ‡∏™‡∏°‡∏≠
        });
    }
    
    return counters;
}

const counters = createCounters();
console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:");
counters.forEach((counter, index) => {
    console.log(`Counter ${index}: ${counter()}`);
});
*/

// TODO: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å var ‡πÄ‡∏õ‡πá‡∏ô let
// ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô IIFE, bind, etc.

// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 5: Best Practices
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 5: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Best Practices");
console.log("-".repeat(30));

// TODO: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô best practices
// 1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å var ‡πÄ‡∏õ‡πá‡∏ô let/const
// 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° type annotations
// 3. ‡πÉ‡∏ä‡πâ interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö objects

/*
// ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏î‡∏µ)
var userName = "‡∏™‡∏°‡∏ä‡∏≤‡∏¢";
var userAge = 25;
var userEmail = "somchai@email.com";
var userAddress = {
    street: "123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó",
    city: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
    zipCode: "10110"
};

function displayUser() {
    var message = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + userName + ", ‡∏≠‡∏≤‡∏¢‡∏∏: " + userAge;
    return message;
}

// TODO: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏õ‡πá‡∏ô best practices
*/

// ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mini Project
console.log("\nüìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà 6: Mini Project - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
console.log("-".repeat(30));

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á mini project ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á interface Student
// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á class StudentManager
// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á methods: addStudent, removeStudent, getStudent, getAllStudents
// 4. ‡πÉ‡∏ä‡πâ const/let ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
// 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° type safety

/*
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:
interface Student {
    id: number;
    name: string;
    age: number;
    grade: string;
    subjects: string[];
}

class StudentManager {
    // TODO: implement
}

// Usage example:
const manager = new StudentManager();
manager.addStudent({
    id: 1,
    name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
    age: 16,
    grade: "‡∏°.4",
    subjects: ["‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå", "‡πÄ‡∏Ñ‡∏°‡∏µ"]
});
*/

console.log("\nüí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î:");
console.log("1. ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î");
console.log("2. ‡πÉ‡∏ä‡πâ console.log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π intermediate results");
console.log("3. ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå");
console.log("4. ‡πÉ‡∏ä‡πâ TypeScript compiler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö errors");
console.log("5. ‡∏≠‡πà‡∏≤‡∏ô error messages ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");

export { };
